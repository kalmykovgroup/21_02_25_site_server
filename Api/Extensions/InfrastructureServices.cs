using System.Security.Cryptography.X509Certificates;
using System.Text;
using Application.Common.Interfaces;
using Domain.Interfaces.Repositories.CategorySpace;
using Domain.Interfaces.Repositories.IntermediateSpace;
using Domain.Interfaces.Repositories.ProductSpace;
using Domain.Interfaces.Repositories.UserSpace;
using Infrastructure.Caching;
using Infrastructure.Data;
using Infrastructure.Repositories.CategorySpace;
using Infrastructure.Repositories.IntermediateSpace;
using Infrastructure.Repositories.ProductSpace;
using Infrastructure.Repositories.UserSpace;
using Infrastructure.Services;
using Infrastructure.Settings;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.DataProtection;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;

namespace Api.Extensions;

public static class InfrastructureServices
{
      public static IServiceCollection AddInfrastructureServices(this IServiceCollection services, IConfiguration configuration, bool isProduction)
    {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è DbContext, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤, –∫—ç—à-—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ç.–¥.
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        services.AddScoped<IWishListProductRepository, WishListProductRepository>();

        services.AddScoped<IWishListRepository, WishListRepository>();

        services.AddScoped<IUserRepository, UserRepository>();

        services.AddScoped<IPhoneVerificationCodeRepository, PhoneVerificationCodeRepository>();

        services.AddScoped<IProductRepository, ProductRepository>();
        services.AddScoped<IRecommendedGroupRepository, RecommendedGroupRepository>();

        services.AddScoped<ICategoryRepository, CategoryRepository>();

        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è JWT
        services.AddSingleton<ITokenService, TokenService>();
        
        //Cache
        services.AddScoped<ICategoryCacheService, CategoryCacheService>();


        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
        JwtSettings? jwtSettings = configuration.GetSection(nameof(JwtSettings)).Get<JwtSettings>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞)
        if (string.IsNullOrWhiteSpace(jwtSettings?.Key) || Encoding.UTF8.GetBytes(jwtSettings.Key).Length < 64)
        {
            throw new InvalidOperationException("JWT Secret Key is too short! It must be at least 64 characters for HS512.");
        }


        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ JWT
        services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(options =>
            {
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = jwtSettings.Issuer,
                    ValidAudience = jwtSettings.Audience,
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings.Key))
                };
            });


        string GetRequiredEnv(string key) => Environment.GetEnvironmentVariable(key)
            ?? throw new InvalidOperationException($"–û–∂–∏–¥–∞–ª–∞—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{key}', –Ω–æ –æ–Ω–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.");


        string? connectionString;

        if (isProduction)
        {
            // –í –ø—Ä–æ–¥–µ —á–∏—Ç–∞–µ–º –∏–∑ env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–∞
            var db = GetRequiredEnv("POSTGRES_DB");
            var user = GetRequiredEnv("POSTGRES_USER");
            var passwordFile = GetRequiredEnv("POSTGRES_PASSWORD_FILE");
            var db_host = GetRequiredEnv("DB_HOST");
            var db_port = GetRequiredEnv("DB_PORT");

            if (!File.Exists(passwordFile)) throw new FileNotFoundException($"–§–∞–π–ª —Å –ø–∞—Ä–æ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {passwordFile}");

            var password = File.ReadAllText(passwordFile).Trim();

            connectionString = $"Host={db_host};Port={db_port};Database={db};Username={user};Password={password}";
            Console.WriteLine("üîê Using production environment variables for DB connection.");
        }
        else
        {
            // –í dev ‚Äî –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            connectionString = configuration.GetConnectionString("DefaultConnection")
                ?? throw new InvalidOperationException("–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.");
            Console.WriteLine("üß™ Using development config file for DB connection.");
        }

        services.AddDbContext<AppDbContext>(options => options.UseNpgsql(connectionString));


     

        services.AddScoped<IUnitOfWork, AppDbContext>();
        
        var redisConnection = configuration.GetConnectionString("Redis");

        if (string.IsNullOrEmpty(redisConnection))
        {
            // –ï—Å–ª–∏ Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback ‚Äì –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∫—ç—à
            services.AddDistributedMemoryCache();
        }
        else
        {
            // –ï—Å–ª–∏ Redis –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
            services.AddStackExchangeRedisCache(options =>
            {
                options.Configuration = redisConnection;
            });
        }
        if (isProduction)
        {
            var certsDir = GetRequiredEnv("CERTS_DIR"); 
            var appName = GetRequiredEnv("APPLICATION_NAME");
            var cert_password_file = GetRequiredEnv("CERT_PASSWORD_FILE");

            var certPath = Path.Combine(certsDir, "cert.pem");
            var keyPath = Path.Combine(certsDir, "key.pem"); 

            if (!File.Exists(certPath) || !File.Exists(keyPath))
                throw new FileNotFoundException("PEM-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");

            var certPassword = File.ReadAllText(cert_password_file).Trim();
            var cert = X509Certificate2.CreateFromEncryptedPemFile(certPath, certPassword, keyPath);

            services.AddDataProtection()
                .PersistKeysToFileSystem(new DirectoryInfo("/keys"))
                .ProtectKeysWithCertificate(cert)
                .SetApplicationName(appName);
        }


        return services;
    }
 
}