services:
  api:
    image: api
    container_name: api
    build:
      context: .
      dockerfile: Api/Dockerfile
    ports:
      - 8080:8080  
    networks:
      - internal
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    volumes:
        - ./Secrets/postgres_password.txt:/run/secrets/postgres_password:ro
  db:
    image: postgres:17
    restart: always
    container_name: pgsql
    env_file:
      - .env  
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./Secrets/postgres_password.txt:/run/secrets/postgres_password:ro
    ports:
      - "5432"
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
    driver: local

networks:
  internal:
    driver: bridge  