services:
  api:
    image: api
    container_name: api
    build:
      context: .
      dockerfile: Api/Dockerfile
    ports:
      - 8080
    networks:
      - internal
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      CERTS_DIR: /certs
      APPLICATION_NAME: KalmykovGroup
      CERT_PASSWORD_FILE: /run/secrets/cert_password
      APP_UID: 1000
    volumes:
        - ./Secrets/postgres_password.txt:/run/secrets/postgres_password:ro
        - ./Secrets/cert_password.txt:/run/secrets/cert_password:ro
        - ./dataprotection:/keys
        - ./certs:/certs
    restart: unless-stopped
  db:
    image: postgres:17
    container_name: pgsql
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./Secrets/postgres_password.txt:/run/secrets/postgres_password:ro
    ports:
      - "5432"
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
  nginx:
    build:
      context: ./nginx
      dockerfile: ./Dockerfile
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80" # Apache внутри server теперь отдаёт Web-клиент
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # основной конфиг 
      - ./nginx/conf.d/:/etc/nginx/conf.d/        # конфиги для виртуальных хостов
      - ./nginx/stream.d/:/etc/nginx/stream.d/    # конфиги для stream 
      - ./nginx/templates/:/etc/nginx/templates    # конфиги для stream  
    environment:
      - API_PORT=${API_PORT}
    networks:
      - public # Для связи с server
    depends_on:
      - api
volumes:
  pgdata:
    driver: local
  dataprotection:
networks:
  internal:
    driver: bridge  